// <auto-generated />
using System;
using BillingService.Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BillingService.Backend.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220101002538_InitMigrations")]
    partial class InitMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.ChargeTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrencyIso")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ChargeTypes");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.UserBillings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrencyIso")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInvoiceRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaymentRequested")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBillings");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.UserCharges", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChargeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DiscountMaturity")
                        .HasColumnType("datetime2");

                    b.Property<int>("Terms")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChargeTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCharges");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.UserDomains", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDomains");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAlias")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.UserBillings", b =>
                {
                    b.HasOne("BillingService.Backend.Domain.Entities.Users", "Users")
                        .WithMany("UserBillings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserBillings_Users")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.UserCharges", b =>
                {
                    b.HasOne("BillingService.Backend.Domain.Entities.ChargeTypes", "ChargeTypes")
                        .WithMany("UserCharges")
                        .HasForeignKey("ChargeTypeId")
                        .HasConstraintName("FK_UserCharges_ChargeTypes")
                        .IsRequired();

                    b.HasOne("BillingService.Backend.Domain.Entities.Users", "Users")
                        .WithMany("UserCharges")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserCharges_Users")
                        .IsRequired();

                    b.Navigation("ChargeTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.UserDetails", b =>
                {
                    b.HasOne("BillingService.Backend.Domain.Entities.Users", "Users")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserDetails_Users")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.UserDomains", b =>
                {
                    b.HasOne("BillingService.Backend.Domain.Entities.Users", "Users")
                        .WithMany("UserDomains")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserDomains_Users")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.ChargeTypes", b =>
                {
                    b.Navigation("UserCharges");
                });

            modelBuilder.Entity("BillingService.Backend.Domain.Entities.Users", b =>
                {
                    b.Navigation("UserBillings");

                    b.Navigation("UserCharges");

                    b.Navigation("UserDetails");

                    b.Navigation("UserDomains");
                });
#pragma warning restore 612, 618
        }
    }
}
